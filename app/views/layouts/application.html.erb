<!DOCTYPE html>
<html>
  <head>
    <title>LIMMMA - University of Sussex</title>
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>
    <%= javascript_pack_tag 'application', 'data-turbolinks-track': 'reload' %>
    <%= stylesheet_pack_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>
    <%= javascript_include_tag 'https://cdn.jsdelivr.net/npm/ol@v8.2.0/dist/ol.js' %>

    <%= stylesheet_link_tag 'team_select', media: 'all', 'data-turbolinks-track': 'reload' %>

  </head>

  <body>
    <nav class="navbar navbar-expand-sm navbar-light bg-light">
      <%= link_to "LIMMMA - University of Sussex", root_path, class: "navbar-brand" %>
      <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbar-content" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>

      <div class="collapse navbar-collapse" id="navbar-content">
        <% if content_for? :nav %>
          <ul class="navbar-nav">
            <%= yield :nav %>
          </ul>
        <% end %>

        <ul class="navbar-nav ml-auto">
          <% if current_user %>
            <li class="nav-item dropdown">
              <a class="nav-link dropdown-toggle" href="#" role="button" data-toggle="dropdown">
                <%= @team.try(&:persisted?) ? @team.name : current_user.name %>
              </a>
              <div class="dropdown-menu dropdown-menu-right">
                <h6 class="dropdown-header">My teams</h6>
                <% current_user.teams.each do |team| %>
                  <%= link_to team.name, team_projects_path(team), class: "dropdown-item" %>
                <% end %>
                <div class="dropdown-divider"></div>
                <%= link_to "Create team...", new_team_path, class: "dropdown-item" %>
                <div class="dropdown-divider"></div>
                <% if current_user.admin? %>
                  <%= link_to "ðŸ”’ Admin panel", admin_index_path, class: "dropdown-item text-warning" %>
                  <div class="dropdown-divider"></div>
                <% end %>
                <%= link_to "Change Password", change_password_user_path, class: "dropdown-item" %>
                <a class="dropdown-item" href="https://forms.gle/1zJnyaCbFExwPzJW8">Leave feedback</a>
                <%= link_to "Sign Out", session_path, method: :delete, class: "dropdown-item" %>
              </div>
            </li>
          <% else %>
            <li class="nav-item">
              <%= link_to "Sign In/Register", new_session_path(return_to: request.path), class: "nav-link" %>
            </li>
          <% end %>
        </ul>
      </div>
    </nav>
    <div class="container">
      <% if flash.alert %>
        <div class="alert alert-danger alert-dismissible fade show my-4">
          <%= flash.alert %>
          <button type="button" class="close" data-dismiss="alert">
            &times;
          </button>
        </div>
      <% end %>
      <% if flash.notice %>
        <div class="alert alert-info alert-dismissible fade show my-4">
          <%= flash.notice %>
          <button type="button" class="close" data-dismiss="alert">
            &times;
          </button>
        </div>
      <% end %>
    </div>
    <%= yield %>
  </body>

  <script>

    function zoomLevel(extent, maxtiles){

        const tileGrid = ol.tilegrid.createXYZ()
        const zoomLevels = Array.from({ length: 30 }, (_, index) => index + 1).reverse()  
        
        for (const zoom of zoomLevels){
            const tiles = tileGrid.getTileRangeForExtentAndZ(extent, zoom)
            const tileCount = tiles.getWidth() * tiles.getHeight()
            if(tileCount <= maxtiles){
                return zoom
            }
        }

    }

    function showZoom(target){
        const extent = document.getElementById(target).value.split(',').map(Number)
        const area = (extent[2]-extent[0])*(extent[3]-extent[1])

        if(isNaN(area)){
            document.getElementById('zoom').innerHTML = 'No valid extent selected'
            document.getElementById('zoom').style.backgroundColor = 'red'
        }else{
        
            const zoom = zoomLevel(extent, 10000000)
            const zoomCategory = zoom > 20 ? ['green', 'high'] : zoom < 20 ? ['orange', 'low'] : ['yellow', 'medium']
            

            document.getElementById('zoom').innerHTML = `${zoomCategory[1]} resolution, zoom level: ${zoom}`
            document.getElementById('zoom').style.backgroundColor = zoomCategory[0]
        }


    }

    function mapUpdate(formGroupID, fn){

        const exinput = document.getElementById(formGroupID)
        if(!exinput) return

        let target = formGroupID === 'extent_0' || formGroupID === 'extent_1' ? 'extent_value' : 'project_extent'

        showZoom(target)

        if(document.getElementById('map')) document.getElementById('map').innerHTML = ''
        const isMac = navigator.platform.toUpperCase().indexOf('MAC')>=0;
        
        if(isMac){
            document.getElementById('guide').innerHTML = 'Select a new extent by holding down the command key and dragging a box on the map.'
        }else{
            document.getElementById('guide').innerHTML = 'Select a new extent by holding down the control key and dragging a box on the map.'
        }

        const extentInput = document.getElementById(target);
        const extent = extentInput.value.split(',').map(Number);

        const map = new ol.Map({
            target: 'map',
            layers: [
            new ol.layer.Tile({
                source: new ol.source.OSM(),
            }),
            ],
            view: new ol.View({
            center: [(extent[0]+extent[2])/2, (extent[1]+extent[3])/2],
            zoom: 9,
            }),
        });

        const extentFeature = new ol.Feature(
            new ol.geom.Polygon([
            [
                [extent[0], extent[1]],
                [extent[0], extent[3]],
                [extent[2], extent[3]],
                [extent[2], extent[1]],
                [extent[0], extent[1]],
            ],
            ])
        );
    
        const extentLayer = new ol.layer.Vector({
            source: new ol.source.Vector({
            features: [extentFeature],
            }),
            style: new ol.style.Style({
            stroke: new ol.style.Stroke({
                color: 'limegreen',
                width: 2,
            }),
            fill: new ol.style.Fill({
                color: 'rgba(0, 155, 0, 0.1)',
            }),
            }),
        });
    
        map.addLayer(extentLayer);

        const dragBox = new ol.interaction.DragBox({
            condition: ol.events.condition.platformModifierKeyOnly
        })

        map.addInteraction(dragBox)

        dragBox.on('boxend', () => {
            const extent = dragBox.getGeometry().getExtent()     
            const extentString = extent.join(',')
            extentInput.value = extentString

            showZoom(target)

            extentFeature.setGeometry(
            new ol.geom.Polygon([
                [
                [extent[0], extent[1]],
                [extent[0], extent[3]],
                [extent[2], extent[3]],
                [extent[2], extent[1]],
                [extent[0], extent[1]],
                ],
            ])
            );

            if(fn) fn()
        })

        function updateMap() {

            showZoom(target)

            const extent = extentInput.value.split(',').map(Number);
    
            map.getView().setCenter([(extent[0]+extent[2])/2, (extent[1]+extent[3])/2]);
    
            extentFeature.setGeometry(
            new ol.geom.Polygon([
                [
                [extent[0], extent[1]],
                [extent[0], extent[3]],
                [extent[2], extent[3]],
                [extent[2], extent[1]],
                [extent[0], extent[1]],
                ],
            ])
            );

            if(fn) fn()
        }
    
        extentInput.addEventListener('input', updateMap);

    }

  </script>
</html>



